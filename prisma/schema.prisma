generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["fullTextSearch", "fullTextIndex"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")

}

model Account {
  id                 String    @id @default(cuid())
  userId             String
  providerType       String
  providerId         String
  providerAccountId  String
  refreshToken       String?
  accessToken        String?
  accessTokenExpires DateTime?
  createdAt          DateTime  @default(now())
  updatedAt          DateTime  @updatedAt
  user               User      @relation(fields: [userId], references: [id])

  @@unique([providerId, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  userId       String
  expires      DateTime
  sessionToken String   @unique
  accessToken  String   @unique
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  user         User     @relation(fields: [userId], references: [id])
}

model User {
  id            String       @id @default(cuid())
  name          String?
  email         String?      @unique
  emailVerified DateTime?
  image         String?
  createdAt     DateTime     @default(now()) @map("created_at")
  updatedAt     DateTime     @default(now()) @map("updated_at")
  description   String       @default("")
  accounts      Account[]
  Post          Post[]
  sessions      Session[]
  comments      Comment[]
  likes         Like[]
  followers     Follow[]     @relation("FollowerRelation")
  following     Follow[]     @relation("FollowingRelation")
  UserBadge     UserBadge[]
  UserFilter    UserFilter[]
  BookMark      BookMark[]

  @@map("users")
}

model AuthorizedUser {
  id         String  @id @default(cuid())
  authorized Boolean @default(false)
  email      String? @unique
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verification_tokens")
}

model Post {
  id          String     @id @default(cuid())
  title       String
  description String
  type        String     @default("md")
  hash        String     @unique
  published   Boolean    @default(false)
  createdAt   DateTime   @default(now()) @map("created_at")
  updatedAt   DateTime   @default(now()) @map("updated_at")
  authorId    String
  keywords    String
  author      User       @relation(fields: [authorId], references: [id], map: "posts_authorId_fkey_unique")
  comments    Comment[]
  likes       Like[]
  BookMark    BookMark[]

  @@index([authorId], map: "posts_authorId_fkey")
  @@map("posts")
}

model Comment {
  id        String   @id @default(cuid())
  text      String
  post      Post     @relation(fields: [postId], references: [id], onDelete: Cascade, map: "comments_postId_fkey_unique")
  postId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade, map: "comments_userId_fkey_unique")
  userId    String
  createdAt DateTime @default(now())

  @@index([postId], map: "comments_postId_fkey")
  @@index([userId], map: "comments_userId_fkey")
  @@map("comments")
}
model Like {
  id        String   @id @default(cuid())
  post      Post     @relation(fields: [postId], references: [id], onDelete: Cascade, map: "likes_postId_fkey_unique")
  postId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade, map: "likes_userId_fkey_unique")
  userId    String
  createdAt DateTime @default(now())

  @@index([postId], map: "likes_postId_fkey")
  @@index([userId], map: "likes_userId_fkey")
  @@map("likes")
}

model Follow {
  id          String @id @default(cuid())
  follower    User   @relation("FollowerRelation", fields: [followerId], references: [id])
  followerId  String
  following   User   @relation("FollowingRelation", fields: [followingId], references: [id])
  followingId String
}

model Badge {
  id          String      @id @default(cuid())
  name        String
  description String
  color       String
  UserBadge   UserBadge[]

  @@map("badges")
}

model UserBadge {
  id      String @id @default(cuid())
  userId  String
  badgeId String
  user    User   @relation(fields: [userId], references: [id])
  badge   Badge  @relation(fields: [badgeId], references: [id])

  @@map("user_badges")
}

model UserFilter {
  id     String @id @default(cuid())
  userId String
  filter String
  type   String
  name   String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("user_filters")
}

model BookMark {
  id     String @id @default(cuid())
  userId String
  postId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  post   Post   @relation(fields: [postId], references: [id], onDelete: Cascade)

  @@map("bookmarks")
}
